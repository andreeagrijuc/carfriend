{"version":3,"sources":["components/Card.js","components/CardList.js","components/cars.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","nickname","src","className","alt","width","height","CardList","cars","map","prototype","i","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","children","App","onSearchChange","event","setState","searchField","target","value","state","this","filteredCars","filter","car","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAiBeA,EAdF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,IAE9B,OAEC,yBAAKC,UAAW,uDACf,yBAAKC,IAAI,aAAaF,IAAG,UAAKA,GAAOG,MAAM,MAAMC,OAAO,QACxD,6BACA,4BAAKN,GACL,4BAAKC,MCcOM,EAtBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAGlB,OACA,6BAEGA,EAAKC,KAAI,SAACC,EAAWC,GACvB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLE,GAAIL,EAAKG,GAAGE,GACZb,KAAMQ,EAAKG,GAAGX,KACdC,SAAUO,EAAKG,GAAGV,SAClBC,IAAKM,EAAKG,GAAGT,WC+CDM,EA/DM,CACrB,CACAK,GAAI,EACJb,KAAM,UACNC,SAAU,KACVC,IAAK,iBAEL,CACAW,GAAI,EACJb,KAAM,UACNC,SAAU,KACVC,IAAK,iBAEL,CACAW,GAAI,EACJb,KAAM,eACNC,SAAU,MACVC,IAAK,kBAEL,CACAW,GAAI,EACJb,KAAM,eACNC,SAAU,MACVC,IAAK,kBAEL,CACAW,GAAI,EACJb,KAAM,UACNC,SAAU,KACVC,IAAK,iBAEL,CACAW,GAAI,EACJb,KAAM,UACNC,SAAU,KACVC,IAAK,iBAEL,CACAW,GAAI,EACJb,KAAM,UACNC,SAAU,KACVC,IAAK,iBAEL,CACAW,GAAI,EACJb,KAAM,aACNC,SAAU,MACVC,IAAK,kBAEL,CACAW,GAAI,EACJb,KAAM,cACNC,SAAU,QACVC,IAAK,oBAEL,CACAW,GAAI,GACJb,KAAM,YACNC,SAAU,OACVC,IAAK,oBC3CUY,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKZ,UAAU,OACd,2BACCA,UAAU,mCACVa,KAAK,SACLC,YAAY,cACZC,SAAYH,MCADI,G,MAPA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,UAAW,SAAWhB,OAAQ,UAC3Cc,EAAMG,SADP,OCiCaC,E,kDA5Bd,aAAgB,IAAD,8BACd,gBAODC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAPzC,EAAKC,MAAQ,CACZvB,KAAMA,EACNoB,YAAa,IAJA,E,qDAYJ,IAAD,EACmBI,KAAKD,MAA1BvB,EADE,EACFA,KAAMoB,EADJ,EACIA,YACPK,EAAezB,EAAK0B,QAAO,SAAAC,GACjC,OAAOA,EAAInC,KAAKoC,cAAcC,SAAST,EAAYQ,kBAEnD,OACC,yBAAKjC,UAAU,MACd,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWY,aAAgBiB,KAAKP,iBAChC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUjB,KAAMyB,U,GAvBHK,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02dd6c37.chunk.js","sourcesContent":["import React from 'react';\r\n//import cars from './cars';\r\n\r\nconst Card = ({name, nickname, src}) => {\r\n\t\r\n\treturn (\r\n\r\n\t\t<div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='carfriends' src={`${src}`} width=\"200\" height=\"150\" />\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<h4>{nickname}</h4>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({cars}) => {\r\n\t\r\n\t\r\n\treturn (\r\n\t<div>\r\n  \t\t{\r\n  \t\tcars.map((prototype, i) => {\r\n\t\treturn (\r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={cars[i].id} \r\n\t\t\tname={cars[i].name} \r\n\t\t\tnickname={cars[i].nickname} \r\n\t\t\tsrc={cars[i].src} \r\n\t\t\t/>\r\n\t\t); \r\n\t})\t\r\n  \t\t}\r\n  \t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n"," export const cars = [\r\n{\r\nid: 1,\r\nname: 'Audi A3',\r\nnickname: 'A3',\r\nsrc: './cars/a3.png'\r\n},\r\n{\r\nid: 2,\r\nname: 'Mazda 3',\r\nnickname: 'M3',\r\nsrc: './cars/m3.png'\r\n},\r\n{\r\nid: 3,\r\nname: 'Mercedes CLA',\r\nnickname: 'CLA',\r\nsrc: './cars/cla.png'\r\n},\r\n{\r\nid: 4,\r\nname: 'Mercedes GLA',\r\nnickname: 'GLA',\r\nsrc: './cars/gla.png'\r\n},\r\n{\r\nid: 5,\r\nname: 'Audi A7',\r\nnickname: 'A7',\r\nsrc: './cars/a7.png'\r\n},\r\n{\r\nid: 6,\r\nname: 'Audi Q3',\r\nnickname: 'Q3', \r\nsrc: './cars/q3.png'\r\n},\r\n{\r\nid: 7,\r\nname: 'Audi A5',\r\nnickname: 'A5',\r\nsrc: './cars/a5.png'\r\n},\r\n{\r\nid: 8,\r\nname: 'Toyota CHR',\r\nnickname: 'CHR', \r\nsrc: './cars/chr.png'\r\n},\r\n{\r\nid: 9,\r\nname: 'Honda Civic',\r\nnickname: 'Civic', \r\nsrc: './cars/civic.png'\r\n},\r\n{\r\nid: 10,\r\nname: 'Seat Leon',\r\nnickname: 'Leon',\r\nsrc: './cars/leon.png'\r\n}\r\n]; \r\n\r\nexport default cars;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search cars' \r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll',  height: '500px'}} >\r\n\t\t{props.children};\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport cars from '../components/cars';\r\nimport SearchBox from '../components/SearchBox';\r\nimport '../containers/App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor () {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tcars: cars,\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchField: event.target.value})\r\n\t}\r\n\r\n\trender () {\r\n\t\tconst {cars, searchField} = this.state;\r\n\t\tconst filteredCars = cars.filter(car => {\r\n\t\treturn car.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>CarFriends</h1>\r\n\t\t\t\t<SearchBox searchChange = {this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList cars={filteredCars} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\t\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render( <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}